#!/usr/bin/env bash

source fonctions_personnelles

# Syntaxe
SYNTAXE="$(syntaxe_afficher_si_erreur "$(basename $0)" "-f FICHIER_REQUIREMENTS" "-p PIP_PATH_PACKAGE")"

# Note that we use "$@" to let each command-line parameter expand to a
# separate word. The quotes around "$@" are essential!
# We need TEMP as the 'eval set --' would nuke the return value of getopt.
TEMP=$(getopt --options 'f:p:' -q -- "$@")
# -q : quiet
# -- : marque la fin des options

# Test si la syntaxe a été correcte (options + arguments)
if [ $? -ne 0 ]
then
    STDERR_afficher_message "ERREUR de syntaxe..."
    STDERR_afficher_message "$SYNTAXE"
    exit 1
fi

# Contrôle des arguments
FLAG_OPTION_F=
FLAG_OPTION_P=

# Remise des options en paramètres positionnels
eval set -- "$TEMP"
unset TEMP

while true; do
    case "$1" in
	-f )  
	    FLAG_OPTION_F=1
            FICHIER_REQUIREMENTS="$2"
            shift 2
            continue
            ;;
	-p )  
	    FLAG_OPTION_P=1
            PIP_PATH_PACKAGE="$2"
            shift 2
            continue
            ;;
       	'--')
	    shift
	    break
      	    ;;
        * )
	    # Gestion des erreurs pour tout autre bug
            STDERR_afficher_message "ERREUR interne\n"
            STDERR_afficher_message "$SYNTAXE"
            exit 2
            ;;
	esac
done


# Test si les options requises ont été fournies (=test si flag défini)
if [ ! -z "$FLAG_OPTION_F" ] && [ ! -z "$FLAG_OPTION_P" ]
then
    # Test si d'autres darguments = en trop (=test si $1 défini)
    if [ ! -z "$1" ]
    then
        STDERR_afficher_message "\nERREUR : argument(s) en trop : \"$*\".\n"
        STDERR_afficher_message "$SYNTAXE"
        exit 3
    else
        :
    fi
else
    STDERR_afficher_message "\nERREUR : Vous devez fournir toutes les options requises.\n"
    STDERR_afficher_message "$SYNTAXE"
    exit 4
fi

########## FIN GESTION ARGUMENTS/OPTIONS ####################

# Contrôle si le fichier des requirements existe - quitte sinon
if [ ! -f "$FICHIER_REQUIREMENTS" ]
then
    STDERR_afficher_message "\nERREUR : le fichier \$FICHIER_REQUIREMENTS :\n\"$FICHIER_REQUIREMENTS\"\nn'est pas existant, n'en est pas un ou le path est erroné.\nVeuillez le contrôler.\n"
    exit 5
fi

# Contrôle si répertoire du prefix_path existe - quitte sinon
if [ ! -d "$PIP_PATH_PACKAGE" ]
then
    STDERR_afficher_message "\nERREUR : le répertoire \$PIP_PATH_PACKAGE :\n\"$PIP_PATH_PACKAGE\"\nn'est pas existant, n'en est pas un ou le path est erroné.\nVeuillez le contrôler.\n"
    exit 5
fi


echo -e "\nContrôle des requirements...\n"
FLAG_PACKET_MANQUANT="false"
while read NOM_PACKAGE
do
    # Récupération du nom du paquet sans la version
    NOM_PACKAGE_AU_PROPRE="$(echo "$NOM_PACKAGE" | grep -m 1 -o -E "^[a-zA-Z0-9-]*")" # regex qui contient lettre min/maj/chiffre/'-' mais rien d'autre (pas d'espace, '=', ...)
    # Contrôle si il existe au moins un package pip correspondant dans les packages de l'environnement    
    ls "$PIP_PATH_PACKAGE" | grep -m 1 -o -E "$NOM_PACKAGE_AU_PROPRE.*" >/dev/null 2>&1 # test si le répertoire des packages pip contient effectivement au moins un répertoire / fichier du nom du paquet recherché
    # Si c'est le cas, 'ls' retourne 0 - sinon affichage du package manquant
    if (($?))
    then
	echo "Package \"$NOM_PACKAGE_AU_PROPRE\" manquant"
	FLAG_PACKET_MANQUANT="true"
    fi
done < <(cat "$FICHIER_REQUIREMENTS")

# Résumé du résultat en fin de script
if [ "$FLAG_PACKET_MANQUANT" = "false" ]
then
    echo -e "\nTout est en ordre !\n"
    exit 0
else
    echo -e "\nERREUR : contrôler l'output pour voir le(s) paquet(s) manquant(s).\n"
    echo -e "Recommandation : contrôler qu'un paquet du même nom contenant des majuscules ou '_' n'est pas présent - si c'est le cas, tout est en ordre.\n"
    exit 1
fi

