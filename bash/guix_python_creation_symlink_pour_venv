#!/usr/bin/env bash

source fonctions_personnelles

# Syntaxe
SYNTAXE="$(syntaxe_afficher_si_erreur "$(basename $0)" "-v REPERTOIRE_PAQUETS_VENV" "-s REPERTOIRE_PAQUETS_SOURCE")"

# Note that we use "$@" to let each command-line parameter expand to a
# separate word. The quotes around "$@" are essential!
# We need TEMP as the 'eval set --' would nuke the return value of getopt.
TEMP=$(getopt --options 'v:s:' -q -- "$@")
# -q : quiet
# -- : marque la fin des options

# Test si la syntaxe a été correcte (options + arguments)
if [ $? -ne 0 ]
then
    STDERR_afficher_message "ERREUR de syntaxe..."
    STDERR_afficher_message "$SYNTAXE"
    exit 1
fi

# Contrôle des arguments
FLAG_OPTION_V=
FLAG_OPTION_S=

# Remise des options en paramètres positionnels
eval set -- "$TEMP"
unset TEMP

while true; do
    case "$1" in
	-v )  
	    FLAG_OPTION_V=1
            REPERTOIRE_PAQUETS_VENV="$2"
            shift 2
            continue
            ;;
	-s )  
	    FLAG_OPTION_S=1
            REPERTOIRE_PAQUETS_SOURCE="$2"
            shift 2
            continue
            ;;
       	'--')
	    shift
	    break
      	    ;;
        * )
	    # Gestion des erreurs pour tout autre bug
            STDERR_afficher_message "ERREUR interne\n"
            STDERR_afficher_message "$SYNTAXE"
            exit 2
            ;;
	esac
done


# Test si les options requises ont été fournies (=test si flag défini)
if [ ! -z "$FLAG_OPTION_V" ] && [ ! -z "$FLAG_OPTION_S" ]
then
    # Test si d'autres darguments = en trop (=test si $1 défini)
    if [ ! -z "$1" ]
    then
        STDERR_afficher_message "\nERREUR : argument(s) en trop : \"$*\".\n"
        STDERR_afficher_message "$SYNTAXE"
        exit 3
    else
        :
    fi
else
    STDERR_afficher_message "\nERREUR : Vous devez fournir toutes les options requises.\n"
    STDERR_afficher_message "$SYNTAXE"
    exit 4
fi

########## FIN GESTION ARGUMENTS/OPTIONS ####################

# Contrôle si le répertoire venv existe - quitte sinon
if [ ! -d "$REPERTOIRE_PAQUETS_VENV" ]
then
    STDERR_afficher_message "\nERREUR : le répertoire venv \$REPERTOIRE_PAQUETS_VENV :\n\"$REPERTOIRE_PAQUETS_VENV\"\nn'est pas existant, n'en est pas un ou le path est erroné.\nVeuillez le contrôler.\n"
    exit 5
fi

# Contrôle si répertoire paquets existe  - quitte sinon
if [ ! -d "$REPERTOIRE_PAQUETS_SOURCE" ]
then
    STDERR_afficher_message "\nERREUR : le répertoire \$REPERTOIRE_PAQUETS_SOURCE :\n\"$REPERTOIRE_PAQUETS_SOURCE\"\nn'est pas existant, n'en est pas un ou le path est erroné.\nVeuillez le contrôler.\n"
    exit 5
fi

# Création des symlink
#RECUPERATION

# Suppression du slash final du répertoire venv s'il y a
REPERTOIRE_PAQUETS_VENV="${REPERTOIRE_PAQUETS_VENV%/}"

# Création d'un symlink pour chaque fichier d'un répertoire à l'autre
while read PATH_FICHIER_SOURCE
# Lecture ligne par ligne du résultat fourni par -> find ... | tr ...
do
    NOM_FICHIER_SOURCE="${PATH_FICHIER_SOURCE##*/}"
    NOM_FICHIER_DU_LIEN="${REPERTOIRE_PAQUETS_VENV}/${NOM_FICHIER_SOURCE}"
    # Test si fichier existant peu importe son type et remplacement par lien le cas échéant
    ls -l "$NOM_FICHIER_DU_LIEN" >/dev/null 2>&1
    if [ $? -eq 0 ] # si ls retourne 0, cela a bien fonctionné et donc un fichier existe
       # donc à remplacer par un lien
    then
	echo "Fichier \"$NOM_FICHIER_DU_LIEN\" remplacé par un nouveau lien."
	rm -rf "$NOM_FICHIER_DU_LIEN"
    fi
    ln -s "$PATH_FICHIER_SOURCE" "$NOM_FICHIER_DU_LIEN"
    #sleep 30
done < <(find "$REPERTOIRE_PAQUETS_SOURCE" -mindepth 1 -maxdepth 1 -print0  | tr '\0' '\n')
